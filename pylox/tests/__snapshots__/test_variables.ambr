# serializer version: 1
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n]
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].1
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].10
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].11
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].12
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].13
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].14
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].15
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].16
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].17
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].18
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].19
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].2
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].20
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].21
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].22
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].23
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].24
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].25
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].26
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].27
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].28
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].29
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].3
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].30
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].31
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].32
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].33
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].34
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].35
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].36
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].37
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].38
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].39
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].4
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].40
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].41
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].42
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].43
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].44
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].45
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].46
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].47
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].48
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].49
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].5
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].50
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].51
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].52
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].53
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].54
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].55
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].56
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].57
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].58
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].59
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].6
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].60
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].61
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].62
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].63
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].64
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].65
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].66
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].67
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].68
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].69
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].7
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].70
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].71
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].72
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].73
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].74
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.EOF: 39>, lexeme='', line=0, literal_val=None),
        'Expected ; after print statement',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].75
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].76
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].77
  _CallList([
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: a.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: b.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Uninitialized variable: c.'),
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        LoxRuntimeError('Undefined variable: d'),
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].78
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.EOF: 39>, lexeme='', line=0, literal_val=None),
        'Expected ; after print statement',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.EOF: 39>, lexeme='', line=0, literal_val=None),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].79
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        4,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].8
  _CallList([
  ])
# ---
# name: test_repl[\n\tvar a;\n\tvar b;\n\tvar c;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b=3;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\ta=b+1;\n\tprint a;\n\tprint b;\n\tprint c;\n\tprint d;\n\tprint d\n\ta=3\n].9
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n]
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].1
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].10
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].11
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].12
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].13
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].14
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].15
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].16
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].17
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].18
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].19
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].2
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].20
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].21
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].22
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].23
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].24
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].25
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].26
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].27
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].28
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].29
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].3
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].30
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].31
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].32
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].33
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].34
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].35
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].36
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].37
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].38
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].39
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].4
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].40
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].41
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].42
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].43
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].44
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].45
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].46
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].47
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].48
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].49
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].5
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].50
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].51
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].52
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].53
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].54
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].55
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].56
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].57
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].58
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].59
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].6
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].60
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].61
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].62
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].63
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].64
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].65
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].66
  _CallList([
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        Token(token_type=<TokenType.AND: 23>, lexeme='and', line=0, literal_val=False),
        'Expected ; after Expression',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].67
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'false',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].7
  _CallList([
    _Call(
      tuple(
        'true',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].8
  _CallList([
  ])
# ---
# name: test_repl[\ntrue or false;\nfalse or true;\ntrue or true;\nfalse or false;\ntrue and false;\nfalse and true;\ntrue and true;\nfalse and false;\ntrue and 2;\n2 and true;\ntrue and true;\n2 and false;\n1 and 2;\n2 and 1;\n1 and 1;\n2 and false;\n].9
  _CallList([
  ])
# ---
# name: test_script[\nvar a = "global a";\nvar b = "global b";\nvar c = "global c";\n{\n  var a = "outer a";\n  var b = "outer b";\n  {\n    var a = "inner a";\n    print a;\n    print b;\n    print c;\n  }\n  print a;\n  print b;\n  print c;\n}\nprint a;\nprint b;\nprint c;\n]
  _CallList([
  ])
# ---
# name: test_script[\nvar a = "global a";\nvar b = "global b";\nvar c = "global c";\n{\n  var a = "outer a";\n  var b = "outer b";\n  {\n    var a = "inner a";\n    print a;\n    print b;\n    print c;\n  }\n  print a;\n  print b;\n  print c;\n}\nprint a;\nprint b;\nprint c;\n].1
  _CallList([
  ])
# ---
# name: test_script[\nvar a = "global a";\nvar b = "global b";\nvar c = "global c";\n{\n  var a = "outer a";\n  var b = "outer b";\n  {\n    var a = "inner a";\n    print a;\n    print b;\n    print c;\n  }\n  print a;\n  print b;\n  print c;\n}\nprint a;\nprint b;\nprint c;\n].2
  _CallList([
  ])
# ---
# name: test_script[\nvar a = "global a";\nvar b = "global b";\nvar c = "global c";\n{\n  var a = "outer a";\n  var b = "outer b";\n  {\n    var a = "inner a";\n    print a;\n    print b;\n    print c;\n  }\n  print a;\n  print b;\n  print c;\n}\nprint a;\nprint b;\nprint c;\n].3
  _CallList([
    _Call(
      tuple(
        'inner a',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'outer b',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'global c',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'outer a',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'outer b',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'global c',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'global a',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'global b',
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        'global c',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_script[\nvar a =3;\nvar b =7;\nif (true) {\n\tprint a;\n} else {\n\tprint b;\n}\nif (false) {\n\tprint a;\n} else {\n\tprint b;\n}\n\nif (true) {\n\tprint b;\n}\nif (1) {\n\tprint b;\n}\nif (false) {\n\tprint b;\n}\n\n]
  _CallList([
  ])
# ---
# name: test_script[\nvar a =3;\nvar b =7;\nif (true) {\n\tprint a;\n} else {\n\tprint b;\n}\nif (false) {\n\tprint a;\n} else {\n\tprint b;\n}\n\nif (true) {\n\tprint b;\n}\nif (1) {\n\tprint b;\n}\nif (false) {\n\tprint b;\n}\n\n].1
  _CallList([
  ])
# ---
# name: test_script[\nvar a =3;\nvar b =7;\nif (true) {\n\tprint a;\n} else {\n\tprint b;\n}\nif (false) {\n\tprint a;\n} else {\n\tprint b;\n}\n\nif (true) {\n\tprint b;\n}\nif (1) {\n\tprint b;\n}\nif (false) {\n\tprint b;\n}\n\n].2
  _CallList([
  ])
# ---
# name: test_script[\nvar a =3;\nvar b =7;\nif (true) {\n\tprint a;\n} else {\n\tprint b;\n}\nif (false) {\n\tprint a;\n} else {\n\tprint b;\n}\n\nif (true) {\n\tprint b;\n}\nif (1) {\n\tprint b;\n}\nif (false) {\n\tprint b;\n}\n\n].3
  _CallList([
    _Call(
      tuple(
        3,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        7,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        7,
      ),
      dict({
      }),
    ),
    _Call(
      tuple(
        7,
      ),
      dict({
      }),
    ),
  ])
# ---
